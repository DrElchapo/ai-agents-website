#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Reddit API –ø–∞—Ä—Å–µ—Ä–∞
"""

import asyncio
import logging
from reddit_api_parser import RedditAPIParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ REDDIT API –ü–ê–†–°–ï–†–ê")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = RedditAPIParser()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Reddit API...")
        test_subreddit = parser.reddit.subreddit('ecommerce')
        test_posts = list(test_subreddit.hot(limit=1))
        
        if test_posts:
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {len(test_posts)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
        else:
            print("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å—Ç—å, –Ω–æ –ø–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤
        print("\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤...")
        reddit_posts = await parser.crawl_reddit_posts(limit_per_subreddit=3)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(reddit_posts)} –ø–æ—Å—Ç–æ–≤ —Å –±–æ–ª–µ–≤—ã–º–∏ —Ç–æ—á–∫–∞–º–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        if reddit_posts:
            print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:")
            for i, post in enumerate(reddit_posts[:3], 1):
                print(f"{i}. {post['title'][:80]}...")
                print(f"   –°—É–±—Ä–µ–¥–¥–∏—Ç: r/{post['subreddit']}")
                print(f"   –†–µ–π—Ç–∏–Ω–≥: {post['score']}")
                print(f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {post['num_comments']}")
                print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –±–æ–ª–µ–π...")
        await parser.analyze_and_save_posts(reddit_posts[:5])  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        print("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
        report = parser._generate_report()
        
        if 'error' not in report:
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
            print(f"   –í—Å–µ–≥–æ –±–æ–ª–µ–π: {report['total_pain_points']}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {report['categories']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {report['error']}")
        
        print("\n" + "=" * 60)
        print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.error(f"Test failed: {e}")

if __name__ == "__main__":
    asyncio.run(main())
